# 定义函数时，参数表中的各个参数称为形式参数，简称形参。
# 调用函数时，参数表中提供的参数称为实际参数，简称实参。
# 在Python中，变量保存的是对象的引用，类似C/C++中的指针。
# 实参传递给形参就是将对象的引用赋值给形参。

#参数的多态性
#多态是面向对象的一个特点，
#指多一个行为针对不同对象可能会得到不同的结果。
#Python中的变量无类型属性，变量可引用各种不同类型的对象。
#同一个函数，传递的实际参数类型不同时，
#可获得不同的结果，体现了多态性。
def add(a,b):#支持+运算的对象都可作参数
    return a+b
add(1,2.5)#数字加法
add('abc','def')#字符串连接
add((1,2),(3,4))#执行元组合并
add([1,2],[3,4])#执行列表合并

#参数赋值传递
#通常，函数调用时按参数的先后顺序，将实参传递给形参。
# 例如：调用add(1,2.5)时，1传递给a，2.5传递给b。
#Python允许以形参赋值的方式，指定将实参传递给形参。
add(a='ab',b='cd')#通过赋值来传递参数
add(b='ab',a='cd')#通过赋值来传递参数

#参数传递与共享引用
def f(x):
    x=100
a=10
f(a)
print(a)#从结果可以看出，将实参a传递给形参x后，
#在函数中重新赋值x，并不会影响到实参a。这是因为
#Python中的赋值是建立变量到对象的引用。重新赋值时，
#意味着形参引用了新的对象，原来的引用已经作废。

#小心使用可变参数
#当实参是可变对象时，如列表、字典等，若在函数中修改形参，
#因为是共享引用，通过实参也获得修改后的对象。
def f(a):
    a[0]='abc'#修改列表的第一个值
x=[1,2]
f(x)#调用函数，传递列表对象的引用
print(x)
#如果要避免列表在函数中被修改，可使用列表的拷贝作为实参。
x=[1,2]
f(x[:])#传递列表的拷贝，这样原列表就不受影响
#还可以在函数内对列表进行拷贝后再使用
"""
def f(a):
    a=a[:]#拷贝列表
    a[0]='abc'#结果显示原列表不变
"""

#有默认值的参数
#在定义函数时，可以为参数设置一个默认值。
#调用函数时如果未提供实参，则形参取默认值。
def add(a,b=-100):#参数b默认值为-100
    return a+b
add(1,2)#传递指定参数
add(1)#形参b取默认值

#传递任意个数的参数
#在定义函数时，若参数名前面使用星号"*"，
#则表示可接受任意个数的参数，
#这些参数保存在一个元组中。
def add(a,*b):
    s=a
    for x in b:#用循环迭代元组b中的对象
        s+=x#累加
    return s#返回累加结果
add(1,2)#求两个数的和
add(1,2,3)#求3个数的和
add(1,2,3,4,5)#求5个数的和

#必须通过赋值传递的参数
#Python允许使用必须通过赋值传递的参数。
#在定义函数时，带星号参数之后的参数必须通过赋值传递。
def add(a,*b,c):
    s=a+c
    for x in b:
        s+=x
    return s
add(1,2,3,c=4)#形参c使用赋值传递
add(1,c=3)#带星号参数可以省略，即传一个空元组